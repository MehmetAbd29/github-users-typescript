// this typeScript function was created to generate the Types for Github API since I couldn't find an accurate freaking type annotation in the documentation. Can also be used to generate the type for whichever object response you have.

type MyType<T> = {
  [K in keyof T]: T[K] extends number
    ? "integer"
    : T[K] extends boolean
    ? "boolean"
    : T[K] extends string
    ? "string"
    : T[K];
};

function createType<T extends Record<string, unknown>>(obj: T): MyType<T> {
  const result: any = {};
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const val = obj[key];
      if (typeof val === "number") {
        result[key] = "integer";
      } else if (typeof val === "boolean") {
        result[key] = "boolean";
      } else if (typeof val === "string") {
        result[key] = "string";
      } else {
        result[key] = val;
      }
    }
  }
  return result;
}

const myObject = { key: 1, Alex: true, Mark: "job" };
const myType = createType(myObject);
console.log(myType); // Output: { key: "integer", Alex: "boolean", Mark: "string" }
